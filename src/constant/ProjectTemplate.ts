import { decodeBase64 } from '@/utility/utils';
import { BlankContract } from './template/BlankContract';
import { CounterContract } from './template/CounterContract';

import {
  TactBlankContract,
  TactCounterContract,
} from './template/tact/contracts';

const stdlibContent = ``;

const contractTsSample = `#include "stdlib.fc";

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_id = ds~load_uint(32);
    ctx_counter = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_uint(ctx_counter, 32)
            .end_cell()
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::increase) {
        int increase_by = in_msg_body~load_uint(32);
        ctx_counter += increase_by;
        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_counter() method_id {
    load_data();
    return ctx_counter;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}

`;

const contractSampleBlank = `#include "stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}`;

export const commonProjectFiles = [
  {
    id: '100',
    name: 'stateInit.cell.ts',
    parent: null,
    type: 'file' as const,
    path: 'stateInit.cell.ts',
    content: `import { beginCell } from "@ton/core";

const cell = beginCell().endCell();

export default cell;`,
    disableActions: true,
  },
  {
    id: '101',
    name: 'message.cell.ts',
    parent: null,
    type: 'file' as const,
    path: 'message.cell.ts',
    content: `import { beginCell } from "@ton/core";

const cell = beginCell().endCell();

export default cell;`,
    disableActions: true,
  },
];

export const ProjectTemplate = {
  tonBlank: {
    func: [
      {
        id: '1',
        name: 'main.fc',
        parent: null,
        type: 'file' as const,
        path: 'main.fc',
        content: contractSampleBlank,
      },
      {
        id: '2',
        name: 'stdlib.fc',
        parent: null,
        type: 'file' as const,
        path: 'stdlib.fc',
        content: decodeBase64(stdlibContent),
      },
      {
        id: '3',
        name: 'tests',
        parent: null,
        type: 'directory' as const,
        path: 'tests',
        content: '',
      },
      {
        id: '4',
        name: 'BlankContract.ts',
        parent: '3',
        type: 'file' as const,
        path: 'tests/BlankContract.ts',
        content: BlankContract.testScript,
      },
      {
        id: '5',
        name: 'BlankContract.spec.ts',
        parent: '3',
        type: 'file' as const,
        path: 'tests/BlankContract.spec.ts',
        content: BlankContract.testCases,
      },
      ...commonProjectFiles,
    ],
    tact: [
      {
        id: '1',
        name: 'main.tact',
        parent: null,
        type: 'file' as const,
        path: 'main.tact',
        content: TactBlankContract.code,
      },
      {
        id: '2',
        name: 'tests',
        parent: null,
        type: 'directory' as const,
        path: 'tests',
        content: '',
      },
      {
        id: '3',
        name: 'default.spec.ts',
        parent: '2',
        type: 'file' as const,
        path: 'tests/default.spec.ts',
        content: BlankContract.tactTestCase,
      },
    ],
  },
  tonCounter: {
    func: [
      {
        id: '1',
        name: 'main.fc',
        parent: null,
        type: 'file' as const,
        path: 'main.fc',
        content: contractTsSample,
      },
      {
        id: '2',
        name: 'stateInit.cell.ts',
        parent: null,
        type: 'file' as const,
        path: 'stateInit.cell.ts',
        content: `import { beginCell } from "@ton/core";

const cell = beginCell()
      .storeUint(1, 32)
      .storeUint(0, 32)
      .endCell();

export default cell;`,
        disableActions: true,
      },
      {
        id: '3',
        name: 'message.cell.ts',
        parent: null,
        type: 'file' as const,
        path: 'message.cell.ts',
        content: `import { beginCell } from "@ton/core";

const cell = beginCell()
        .storeUint('0x7e8764ef', 32) // op (op #0x7e8764ef = increment)
        .storeUint(1, 64) // query id
        .storeUint(4, 32) // increase by
        .endCell();
        
export default cell;`,
        disableActions: true,
      },
      {
        id: '4',
        name: 'stdlib.fc',
        parent: null,
        type: 'file' as const,
        path: 'stdlib.fc',
        content: decodeBase64(stdlibContent),
      },
      {
        id: '5',
        name: 'tests',
        parent: null,
        type: 'directory' as const,
        path: 'tests',
        content: '',
      },
      {
        id: '6',
        name: 'CounterContract.ts',
        parent: '5',
        type: 'file' as const,
        path: 'tests/CounterContract.ts',
        content: CounterContract.testScript,
      },
      {
        id: '7',
        name: 'CounterContract.spec.ts',
        parent: '5',
        type: 'file' as const,
        path: 'tests/CounterContract.spec.ts',
        content: CounterContract.testCases,
      },
    ],
    tact: [
      {
        id: '1',
        name: 'main.tact',
        parent: null,
        type: 'file' as const,
        path: 'main.tact',
        content: TactCounterContract.code,
      },
      {
        id: '2',
        name: 'tests',
        parent: null,
        type: 'directory' as const,
        path: 'tests',
        content: '',
      },
      {
        id: '3',
        name: 'Counter.spec.ts',
        parent: '2',
        type: 'file' as const,
        path: 'tests/Counter.spec.ts',
        content: CounterContract.tactTestCases,
      },
    ],
  },
};
